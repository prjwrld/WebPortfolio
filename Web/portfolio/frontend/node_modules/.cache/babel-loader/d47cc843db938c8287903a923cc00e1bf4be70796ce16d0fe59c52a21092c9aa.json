{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n// Knowledge base with structured data\nconst knowledgeBase = {\n  about: {\n    description: \"I'm Prajwal Prasad, an AI Developer and Growth Engineer passionate about building innovative AI solutions. I specialize in creating intelligent systems that solve real-world problems.\",\n    education: \"Pursuing Bachelor's in Computer Applications at Amrita Vishwa Vidyapeetham, focusing on AI and software development.\",\n    currentRole: \"Growth Engineer at Nella Marketing, developing AI agents for lead automation and business process optimization.\"\n  },\n  skills: {\n    programming: ['Python', 'JavaScript', 'Java', 'C++', 'SQL'],\n    frameworks: ['React', 'Node.js', 'TensorFlow', 'PyTorch', 'Hugging Face Transformers'],\n    technologies: ['RAG Systems', 'LLM Fine-tuning', 'Cloud Platforms (Azure, GCP)', 'Docker', 'Git'],\n    softSkills: ['Problem Solving', 'Team Collaboration', 'Project Management', 'Communication']\n  },\n  projects: [{\n    name: 'AI Meeting Summarizer',\n    description: 'Automated meeting notes generation using Whisper and Hugging Face models.',\n    technologies: ['Python', 'Whisper', 'Hugging Face', 'NLP'],\n    impact: 'Reduced meeting documentation time by 70%'\n  }, {\n    name: 'AI Voice Agent',\n    description: 'Voice-enabled assistant with RAG and TTS capabilities for document search and Q&A.',\n    technologies: ['Python', 'RAG', 'TTS', 'Vector DB'],\n    impact: 'Enabled natural language queries across document repositories'\n  }, {\n    name: 'BloodLink',\n    description: 'Platform connecting blood donors with recipients in need.',\n    technologies: ['React', 'Node.js', 'MongoDB', 'Google Maps API'],\n    impact: 'Facilitated over 1,000+ successful blood donations'\n  }],\n  experience: [{\n    role: 'Growth Engineer',\n    company: 'Nella Marketing',\n    duration: '2023 - Present',\n    responsibilities: ['Develop AI agents for lead generation automation', 'Implement RAG systems for knowledge management', 'Optimize business processes using AI/ML']\n  }, {\n    role: 'Web Developer',\n    company: 'Godofon Events',\n    duration: '2022 - 2023',\n    responsibilities: ['Developed and maintained event management web applications', 'Implemented responsive UI/UX designs', 'Integrated third-party APIs for payment and notifications']\n  }]\n};\nconst chatService = {\n  sendMessage: async message => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/chat/message`, {\n        message,\n        context: 'portfolio_assistant',\n        knowledgeBase: true // Indicate we want structured responses\n      });\n      return response.data.response || generateStructuredResponse(message);\n    } catch (error) {\n      console.error('Chat service error:', error);\n      return generateStructuredResponse(message);\n    }\n  }\n};\nconst generateStructuredResponse = message => {\n  const lowerMessage = message.toLowerCase().trim();\n\n  // Intent detection with priority\n  const intents = [{\n    name: 'greeting',\n    patterns: ['hi', 'hello', 'hey', 'greetings', 'good morning', 'good afternoon', 'good evening', 'howdy', \"what's up\", 'sup'],\n    priority: 1,\n    handler: handleGreeting\n  }, {\n    name: 'about',\n    patterns: ['who are you', 'tell me about yourself', 'introduce yourself', 'what do you do'],\n    priority: 2,\n    handler: handleAbout\n  }, {\n    name: 'projects',\n    patterns: ['project', 'built', 'created', 'developed', 'what have you built', 'show me your work'],\n    priority: 2,\n    handler: handleProjects\n  }, {\n    name: 'skills',\n    patterns: ['skill', 'technologies', 'tech stack', 'what can you do', 'what are you good at', 'expertise'],\n    priority: 2,\n    handler: handleSkills\n  }, {\n    name: 'experience',\n    patterns: ['experience', 'work', 'job', 'career', 'background', 'where have you worked'],\n    priority: 2,\n    handler: handleExperience\n  }, {\n    name: 'contact',\n    patterns: ['contact', 'get in touch', 'email', 'linkedin', 'github', 'social media'],\n    priority: 2,\n    handler: handleContact\n  }];\n\n  // Find matching intents\n  const matchedIntents = intents.filter(intent => intent.patterns.some(pattern => lowerMessage.includes(pattern))).sort((a, b) => b.priority - a.priority);\n\n  // Handle the highest priority intent\n  if (matchedIntents.length > 0) {\n    return matchedIntents[0].handler(lowerMessage);\n  }\n\n  // Default response for unknown queries\n  return handleDefault();\n};\n\n// Intent Handlers\nfunction handleGreeting() {\n  const greetings = [`Hi there! ðŸ‘‹ I'm Prajwal's AI assistant. I can help you explore his professional background, projects, and skills. What would you like to know?`, `Hello! ðŸ˜Š Thanks for stopping by. I'm here to share insights about Prajwal's work in AI and software development. What interests you?`, `Hey there! ðŸ‘‹ I'm excited to chat about Prajwal's journey in tech. Would you like to hear about his projects, skills, or experience?`];\n  return randomResponse(greetings);\n}\nfunction handleAbout() {\n  const about = `I'm Prajwal's AI assistant! ${knowledgeBase.about.description} ${knowledgeBase.about.education} ${knowledgeBase.about.currentRole} What would you like to explore further?`;\n  return about;\n}\nfunction handleProjects(query) {\n  // If asking about a specific project\n  const projectNames = knowledgeBase.projects.map(p => p.name.toLowerCase());\n  const mentionedProject = projectNames.find(name => query.includes(name.toLowerCase()));\n  if (mentionedProject) {\n    const project = knowledgeBase.projects.find(p => p.name.toLowerCase() === mentionedProject);\n    return formatProjectDetails(project);\n  }\n\n  // List all projects with brief descriptions\n  const projectsList = knowledgeBase.projects.map(project => `â€¢ ${project.name}: ${project.description} (${project.technologies.join(', ').replace(/, ([^,]*)$/, ', and $1')})`).join('\\n');\n  return `Here are some of the key projects I've worked on:\\n\\n${projectsList}\\n\\nWould you like more details about any specific project?`;\n}\nfunction handleSkills() {\n  const skillsText = `Here's a quick overview of my technical skills:\n\nâ€¢ Programming: ${knowledgeBase.skills.programming.join(', ')}\nâ€¢ Frameworks: ${knowledgeBase.skills.frameworks.join(', ')}\nâ€¢ Technologies: ${knowledgeBase.skills.technologies.join(', ')}\nâ€¢ Soft Skills: ${knowledgeBase.skills.softSkills.join(', ')}\n\nI'm always learning and expanding my skill set. Is there a particular area you'd like to know more about?`;\n  return skillsText;\n}\nfunction handleExperience() {\n  const experienceText = knowledgeBase.experience.map(exp => `**${exp.role} at ${exp.company} (${exp.duration})**\\n` + exp.responsibilities.map(resp => `â€¢ ${resp}`).join('\\n')).join('\\n\\n');\n  return `Here's a summary of my professional experience:\\n\\n${experienceText}\\n\\nWould you like more details about any of these roles?`;\n}\nfunction handleContact() {\n  return `You can connect with Prajwal through these channels:\\n\\n` + `â€¢ LinkedIn: [Prajwal's LinkedIn Profile](https://linkedin.com/in/yourusername)\\n` + `â€¢ GitHub: [github.com/yourusername](https://github.com/yourusername)\\n` + `â€¢ Email: your.email@example.com\\n\\n` + `Feel free to reach out for collaborations or just to say hi!`;\n}\nfunction handleDefault() {\n  const defaultResponses = [\"I'm not sure I fully understand. Could you rephrase that? I can tell you about Prajwal's projects, skills, or work experience.\", \"I'd love to help with that! Could you clarify if you're asking about projects, technical skills, or work experience?\", `Hmm, I'm not certain how to respond to that. Here are some things I can help with:\\n` + `â€¢ Projects I've worked on\\n` + `â€¢ My technical skills and expertise\\n` + `â€¢ My professional experience\\n` + `â€¢ How to get in touch`];\n  return randomResponse(defaultResponses);\n}\n\n// Helper functions\nfunction randomResponse(responses) {\n  return responses[Math.floor(Math.random() * responses.length)];\n}\nfunction formatProjectDetails(project) {\n  return `**${project.name}**\\n\\n` + `${project.description}\\n\\n` + `**Technologies Used:** ${project.technologies.join(', ').replace(/, ([^,]*)$/, ', and $1')}\\n` + `**Impact:** ${project.impact}\\n\\n` + `Would you like to know more about this project or see some code samples?`;\n}\nexport default chatService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","knowledgeBase","about","description","education","currentRole","skills","programming","frameworks","technologies","softSkills","projects","name","impact","experience","role","company","duration","responsibilities","chatService","sendMessage","message","response","post","context","data","generateStructuredResponse","error","console","lowerMessage","toLowerCase","trim","intents","patterns","priority","handler","handleGreeting","handleAbout","handleProjects","handleSkills","handleExperience","handleContact","matchedIntents","filter","intent","some","pattern","includes","sort","a","b","length","handleDefault","greetings","randomResponse","query","projectNames","map","p","mentionedProject","find","project","formatProjectDetails","projectsList","join","replace","skillsText","experienceText","exp","resp","defaultResponses","responses","Math","floor","random"],"sources":["/Users/prjwlsmac/Downloads/Web/portfolio/frontend/src/services/chatService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n// Knowledge base with structured data\nconst knowledgeBase = {\n  about: {\n    description: \"I'm Prajwal Prasad, an AI Developer and Growth Engineer passionate about building innovative AI solutions. I specialize in creating intelligent systems that solve real-world problems.\",\n    education: \"Pursuing Bachelor's in Computer Applications at Amrita Vishwa Vidyapeetham, focusing on AI and software development.\",\n    currentRole: \"Growth Engineer at Nella Marketing, developing AI agents for lead automation and business process optimization.\"\n  },\n  skills: {\n    programming: ['Python', 'JavaScript', 'Java', 'C++', 'SQL'],\n    frameworks: ['React', 'Node.js', 'TensorFlow', 'PyTorch', 'Hugging Face Transformers'],\n    technologies: ['RAG Systems', 'LLM Fine-tuning', 'Cloud Platforms (Azure, GCP)', 'Docker', 'Git'],\n    softSkills: ['Problem Solving', 'Team Collaboration', 'Project Management', 'Communication']\n  },\n  projects: [\n    {\n      name: 'AI Meeting Summarizer',\n      description: 'Automated meeting notes generation using Whisper and Hugging Face models.',\n      technologies: ['Python', 'Whisper', 'Hugging Face', 'NLP'],\n      impact: 'Reduced meeting documentation time by 70%'\n    },\n    {\n      name: 'AI Voice Agent',\n      description: 'Voice-enabled assistant with RAG and TTS capabilities for document search and Q&A.',\n      technologies: ['Python', 'RAG', 'TTS', 'Vector DB'],\n      impact: 'Enabled natural language queries across document repositories'\n    },\n    {\n      name: 'BloodLink',\n      description: 'Platform connecting blood donors with recipients in need.',\n      technologies: ['React', 'Node.js', 'MongoDB', 'Google Maps API'],\n      impact: 'Facilitated over 1,000+ successful blood donations'\n    }\n  ],\n  experience: [\n    {\n      role: 'Growth Engineer',\n      company: 'Nella Marketing',\n      duration: '2023 - Present',\n      responsibilities: [\n        'Develop AI agents for lead generation automation',\n        'Implement RAG systems for knowledge management',\n        'Optimize business processes using AI/ML'\n      ]\n    },\n    {\n      role: 'Web Developer',\n      company: 'Godofon Events',\n      duration: '2022 - 2023',\n      responsibilities: [\n        'Developed and maintained event management web applications',\n        'Implemented responsive UI/UX designs',\n        'Integrated third-party APIs for payment and notifications'\n      ]\n    }\n  ]\n};\n\nconst chatService = {\n  sendMessage: async (message) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/chat/message`, {\n        message,\n        context: 'portfolio_assistant',\n        knowledgeBase: true // Indicate we want structured responses\n      });\n      return response.data.response || generateStructuredResponse(message);\n    } catch (error) {\n      console.error('Chat service error:', error);\n      return generateStructuredResponse(message);\n    }\n  }\n};\n\nconst generateStructuredResponse = (message) => {\n  const lowerMessage = message.toLowerCase().trim();\n  \n  // Intent detection with priority\n  const intents = [\n    {\n      name: 'greeting',\n      patterns: ['hi', 'hello', 'hey', 'greetings', 'good morning', 'good afternoon', 'good evening', 'howdy', \"what's up\", 'sup'],\n      priority: 1,\n      handler: handleGreeting\n    },\n    {\n      name: 'about',\n      patterns: ['who are you', 'tell me about yourself', 'introduce yourself', 'what do you do'],\n      priority: 2,\n      handler: handleAbout\n    },\n    {\n      name: 'projects',\n      patterns: ['project', 'built', 'created', 'developed', 'what have you built', 'show me your work'],\n      priority: 2,\n      handler: handleProjects\n    },\n    {\n      name: 'skills',\n      patterns: ['skill', 'technologies', 'tech stack', 'what can you do', 'what are you good at', 'expertise'],\n      priority: 2,\n      handler: handleSkills\n    },\n    {\n      name: 'experience',\n      patterns: ['experience', 'work', 'job', 'career', 'background', 'where have you worked'],\n      priority: 2,\n      handler: handleExperience\n    },\n    {\n      name: 'contact',\n      patterns: ['contact', 'get in touch', 'email', 'linkedin', 'github', 'social media'],\n      priority: 2,\n      handler: handleContact\n    }\n  ];\n\n  // Find matching intents\n  const matchedIntents = intents\n    .filter(intent => intent.patterns.some(pattern => lowerMessage.includes(pattern)))\n    .sort((a, b) => b.priority - a.priority);\n\n  // Handle the highest priority intent\n  if (matchedIntents.length > 0) {\n    return matchedIntents[0].handler(lowerMessage);\n  }\n\n  // Default response for unknown queries\n  return handleDefault();\n};\n\n// Intent Handlers\nfunction handleGreeting() {\n  const greetings = [\n    `Hi there! ðŸ‘‹ I'm Prajwal's AI assistant. I can help you explore his professional background, projects, and skills. What would you like to know?`,\n    `Hello! ðŸ˜Š Thanks for stopping by. I'm here to share insights about Prajwal's work in AI and software development. What interests you?`,\n    `Hey there! ðŸ‘‹ I'm excited to chat about Prajwal's journey in tech. Would you like to hear about his projects, skills, or experience?`\n  ];\n  return randomResponse(greetings);\n}\n\nfunction handleAbout() {\n  const about = `I'm Prajwal's AI assistant! ${knowledgeBase.about.description} ${knowledgeBase.about.education} ${knowledgeBase.about.currentRole} What would you like to explore further?`;\n  return about;\n}\n\nfunction handleProjects(query) {\n  // If asking about a specific project\n  const projectNames = knowledgeBase.projects.map(p => p.name.toLowerCase());\n  const mentionedProject = projectNames.find(name => query.includes(name.toLowerCase()));\n  \n  if (mentionedProject) {\n    const project = knowledgeBase.projects.find(p => p.name.toLowerCase() === mentionedProject);\n    return formatProjectDetails(project);\n  }\n  \n  // List all projects with brief descriptions\n  const projectsList = knowledgeBase.projects.map(project => \n    `â€¢ ${project.name}: ${project.description} (${project.technologies.join(', ').replace(/, ([^,]*)$/, ', and $1')})`\n  ).join('\\n');\n  \n  return `Here are some of the key projects I've worked on:\\n\\n${projectsList}\\n\\nWould you like more details about any specific project?`;\n}\n\nfunction handleSkills() {\n  const skillsText = `Here's a quick overview of my technical skills:\n\nâ€¢ Programming: ${knowledgeBase.skills.programming.join(', ')}\nâ€¢ Frameworks: ${knowledgeBase.skills.frameworks.join(', ')}\nâ€¢ Technologies: ${knowledgeBase.skills.technologies.join(', ')}\nâ€¢ Soft Skills: ${knowledgeBase.skills.softSkills.join(', ')}\n\nI'm always learning and expanding my skill set. Is there a particular area you'd like to know more about?`;\n  return skillsText;\n}\n\nfunction handleExperience() {\n  const experienceText = knowledgeBase.experience.map(exp => \n    `**${exp.role} at ${exp.company} (${exp.duration})**\\n` +\n    exp.responsibilities.map(resp => `â€¢ ${resp}`).join('\\n')\n  ).join('\\n\\n');\n  \n  return `Here's a summary of my professional experience:\\n\\n${experienceText}\\n\\nWould you like more details about any of these roles?`;\n}\n\nfunction handleContact() {\n  return `You can connect with Prajwal through these channels:\\n\\n` +\n    `â€¢ LinkedIn: [Prajwal's LinkedIn Profile](https://linkedin.com/in/yourusername)\\n` +\n    `â€¢ GitHub: [github.com/yourusername](https://github.com/yourusername)\\n` +\n    `â€¢ Email: your.email@example.com\\n\\n` +\n    `Feel free to reach out for collaborations or just to say hi!`;\n}\n\nfunction handleDefault() {\n  const defaultResponses = [\n    \"I'm not sure I fully understand. Could you rephrase that? I can tell you about Prajwal's projects, skills, or work experience.\",\n    \"I'd love to help with that! Could you clarify if you're asking about projects, technical skills, or work experience?\",\n    `Hmm, I'm not certain how to respond to that. Here are some things I can help with:\\n` +\n    `â€¢ Projects I've worked on\\n` +\n    `â€¢ My technical skills and expertise\\n` +\n    `â€¢ My professional experience\\n` +\n    `â€¢ How to get in touch`\n  ];\n  return randomResponse(defaultResponses);\n}\n\n// Helper functions\nfunction randomResponse(responses) {\n  return responses[Math.floor(Math.random() * responses.length)];\n}\n\nfunction formatProjectDetails(project) {\n  return `**${project.name}**\\n\\n` +\n    `${project.description}\\n\\n` +\n    `**Technologies Used:** ${project.technologies.join(', ').replace(/, ([^,]*)$/, ', and $1')}\\n` +\n    `**Impact:** ${project.impact}\\n\\n` +\n    `Would you like to know more about this project or see some code samples?`;\n}\n\nexport default chatService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE;IACLC,WAAW,EAAE,yLAAyL;IACtMC,SAAS,EAAE,sHAAsH;IACjIC,WAAW,EAAE;EACf,CAAC;EACDC,MAAM,EAAE;IACNC,WAAW,EAAE,CAAC,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;IAC3DC,UAAU,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,2BAA2B,CAAC;IACtFC,YAAY,EAAE,CAAC,aAAa,EAAE,iBAAiB,EAAE,8BAA8B,EAAE,QAAQ,EAAE,KAAK,CAAC;IACjGC,UAAU,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,eAAe;EAC7F,CAAC;EACDC,QAAQ,EAAE,CACR;IACEC,IAAI,EAAE,uBAAuB;IAC7BT,WAAW,EAAE,2EAA2E;IACxFM,YAAY,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC;IAC1DI,MAAM,EAAE;EACV,CAAC,EACD;IACED,IAAI,EAAE,gBAAgB;IACtBT,WAAW,EAAE,oFAAoF;IACjGM,YAAY,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC;IACnDI,MAAM,EAAE;EACV,CAAC,EACD;IACED,IAAI,EAAE,WAAW;IACjBT,WAAW,EAAE,2DAA2D;IACxEM,YAAY,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,iBAAiB,CAAC;IAChEI,MAAM,EAAE;EACV,CAAC,CACF;EACDC,UAAU,EAAE,CACV;IACEC,IAAI,EAAE,iBAAiB;IACvBC,OAAO,EAAE,iBAAiB;IAC1BC,QAAQ,EAAE,gBAAgB;IAC1BC,gBAAgB,EAAE,CAChB,kDAAkD,EAClD,gDAAgD,EAChD,yCAAyC;EAE7C,CAAC,EACD;IACEH,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAE,gBAAgB;IACzBC,QAAQ,EAAE,aAAa;IACvBC,gBAAgB,EAAE,CAChB,4DAA4D,EAC5D,sCAAsC,EACtC,2DAA2D;EAE/D,CAAC;AAEL,CAAC;AAED,MAAMC,WAAW,GAAG;EAClBC,WAAW,EAAE,MAAOC,OAAO,IAAK;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,GAAG1B,YAAY,mBAAmB,EAAE;QACpEwB,OAAO;QACPG,OAAO,EAAE,qBAAqB;QAC9BvB,aAAa,EAAE,IAAI,CAAC;MACtB,CAAC,CAAC;MACF,OAAOqB,QAAQ,CAACG,IAAI,CAACH,QAAQ,IAAII,0BAA0B,CAACL,OAAO,CAAC;IACtE,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAOD,0BAA0B,CAACL,OAAO,CAAC;IAC5C;EACF;AACF,CAAC;AAED,MAAMK,0BAA0B,GAAIL,OAAO,IAAK;EAC9C,MAAMQ,YAAY,GAAGR,OAAO,CAACS,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;;EAEjD;EACA,MAAMC,OAAO,GAAG,CACd;IACEpB,IAAI,EAAE,UAAU;IAChBqB,QAAQ,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,gBAAgB,EAAE,cAAc,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC;IAC5HC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAEC;EACX,CAAC,EACD;IACExB,IAAI,EAAE,OAAO;IACbqB,QAAQ,EAAE,CAAC,aAAa,EAAE,wBAAwB,EAAE,oBAAoB,EAAE,gBAAgB,CAAC;IAC3FC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAEE;EACX,CAAC,EACD;IACEzB,IAAI,EAAE,UAAU;IAChBqB,QAAQ,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,qBAAqB,EAAE,mBAAmB,CAAC;IAClGC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAEG;EACX,CAAC,EACD;IACE1B,IAAI,EAAE,QAAQ;IACdqB,QAAQ,EAAE,CAAC,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,WAAW,CAAC;IACzGC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAEI;EACX,CAAC,EACD;IACE3B,IAAI,EAAE,YAAY;IAClBqB,QAAQ,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,uBAAuB,CAAC;IACxFC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAEK;EACX,CAAC,EACD;IACE5B,IAAI,EAAE,SAAS;IACfqB,QAAQ,EAAE,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;IACpFC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAEM;EACX,CAAC,CACF;;EAED;EACA,MAAMC,cAAc,GAAGV,OAAO,CAC3BW,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACX,QAAQ,CAACY,IAAI,CAACC,OAAO,IAAIjB,YAAY,CAACkB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAAC,CACjFE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChB,QAAQ,GAAGe,CAAC,CAACf,QAAQ,CAAC;;EAE1C;EACA,IAAIQ,cAAc,CAACS,MAAM,GAAG,CAAC,EAAE;IAC7B,OAAOT,cAAc,CAAC,CAAC,CAAC,CAACP,OAAO,CAACN,YAAY,CAAC;EAChD;;EAEA;EACA,OAAOuB,aAAa,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,SAAShB,cAAcA,CAAA,EAAG;EACxB,MAAMiB,SAAS,GAAG,CAChB,iJAAiJ,EACjJ,uIAAuI,EACvI,sIAAsI,CACvI;EACD,OAAOC,cAAc,CAACD,SAAS,CAAC;AAClC;AAEA,SAAShB,WAAWA,CAAA,EAAG;EACrB,MAAMnC,KAAK,GAAG,+BAA+BD,aAAa,CAACC,KAAK,CAACC,WAAW,IAAIF,aAAa,CAACC,KAAK,CAACE,SAAS,IAAIH,aAAa,CAACC,KAAK,CAACG,WAAW,0CAA0C;EAC1L,OAAOH,KAAK;AACd;AAEA,SAASoC,cAAcA,CAACiB,KAAK,EAAE;EAC7B;EACA,MAAMC,YAAY,GAAGvD,aAAa,CAACU,QAAQ,CAAC8C,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC9C,IAAI,CAACkB,WAAW,CAAC,CAAC,CAAC;EAC1E,MAAM6B,gBAAgB,GAAGH,YAAY,CAACI,IAAI,CAAChD,IAAI,IAAI2C,KAAK,CAACR,QAAQ,CAACnC,IAAI,CAACkB,WAAW,CAAC,CAAC,CAAC,CAAC;EAEtF,IAAI6B,gBAAgB,EAAE;IACpB,MAAME,OAAO,GAAG5D,aAAa,CAACU,QAAQ,CAACiD,IAAI,CAACF,CAAC,IAAIA,CAAC,CAAC9C,IAAI,CAACkB,WAAW,CAAC,CAAC,KAAK6B,gBAAgB,CAAC;IAC3F,OAAOG,oBAAoB,CAACD,OAAO,CAAC;EACtC;;EAEA;EACA,MAAME,YAAY,GAAG9D,aAAa,CAACU,QAAQ,CAAC8C,GAAG,CAACI,OAAO,IACrD,KAAKA,OAAO,CAACjD,IAAI,KAAKiD,OAAO,CAAC1D,WAAW,KAAK0D,OAAO,CAACpD,YAAY,CAACuD,IAAI,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,GACjH,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;EAEZ,OAAO,wDAAwDD,YAAY,6DAA6D;AAC1I;AAEA,SAASxB,YAAYA,CAAA,EAAG;EACtB,MAAM2B,UAAU,GAAG;AACrB;AACA,iBAAiBjE,aAAa,CAACK,MAAM,CAACC,WAAW,CAACyD,IAAI,CAAC,IAAI,CAAC;AAC5D,gBAAgB/D,aAAa,CAACK,MAAM,CAACE,UAAU,CAACwD,IAAI,CAAC,IAAI,CAAC;AAC1D,kBAAkB/D,aAAa,CAACK,MAAM,CAACG,YAAY,CAACuD,IAAI,CAAC,IAAI,CAAC;AAC9D,iBAAiB/D,aAAa,CAACK,MAAM,CAACI,UAAU,CAACsD,IAAI,CAAC,IAAI,CAAC;AAC3D;AACA,0GAA0G;EACxG,OAAOE,UAAU;AACnB;AAEA,SAAS1B,gBAAgBA,CAAA,EAAG;EAC1B,MAAM2B,cAAc,GAAGlE,aAAa,CAACa,UAAU,CAAC2C,GAAG,CAACW,GAAG,IACrD,KAAKA,GAAG,CAACrD,IAAI,OAAOqD,GAAG,CAACpD,OAAO,KAAKoD,GAAG,CAACnD,QAAQ,OAAO,GACvDmD,GAAG,CAAClD,gBAAgB,CAACuC,GAAG,CAACY,IAAI,IAAI,KAAKA,IAAI,EAAE,CAAC,CAACL,IAAI,CAAC,IAAI,CACzD,CAAC,CAACA,IAAI,CAAC,MAAM,CAAC;EAEd,OAAO,sDAAsDG,cAAc,2DAA2D;AACxI;AAEA,SAAS1B,aAAaA,CAAA,EAAG;EACvB,OAAO,0DAA0D,GAC/D,kFAAkF,GAClF,wEAAwE,GACxE,qCAAqC,GACrC,8DAA8D;AAClE;AAEA,SAASW,aAAaA,CAAA,EAAG;EACvB,MAAMkB,gBAAgB,GAAG,CACvB,gIAAgI,EAChI,sHAAsH,EACtH,sFAAsF,GACtF,6BAA6B,GAC7B,uCAAuC,GACvC,gCAAgC,GAChC,uBAAuB,CACxB;EACD,OAAOhB,cAAc,CAACgB,gBAAgB,CAAC;AACzC;;AAEA;AACA,SAAShB,cAAcA,CAACiB,SAAS,EAAE;EACjC,OAAOA,SAAS,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,SAAS,CAACpB,MAAM,CAAC,CAAC;AAChE;AAEA,SAASW,oBAAoBA,CAACD,OAAO,EAAE;EACrC,OAAO,KAAKA,OAAO,CAACjD,IAAI,QAAQ,GAC9B,GAAGiD,OAAO,CAAC1D,WAAW,MAAM,GAC5B,0BAA0B0D,OAAO,CAACpD,YAAY,CAACuD,IAAI,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,IAAI,GAC/F,eAAeJ,OAAO,CAAChD,MAAM,MAAM,GACnC,0EAA0E;AAC9E;AAEA,eAAeM,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}